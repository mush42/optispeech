[project]
name = "optispeech"
version = "1.0"
description = "A lightweight End-to-End text-to-speech model"
dependencies = [
    "torch<2.4",
    "torchvision<2.4",
    "lightning>=2.0.0",
    "torchmetrics>=0.11.4",
    "nnaudio>=0.3.3",
    "penn==0.0.14",
    "piper-phonemize>=1.1.0",
    "pyworld>=0.3.4",
    "pesq>=0.0.4",
    "hydra-core>=1.3.2",
    "hydra-colorlog==1.2.0",
    "hydra-optuna-sweeper==1.2.0",
    "rootutils>=1.0.7",
    "pre-commit>=3.8.0",
    "rich>=13.7.1",
    "pytest>=8.3.2",
    "tensorboard>=2.17.0",
    "librosa==0.9.2",
    "cython>=3.0.11",
    "einops>=0.8.0",
    "unidecode>=1.3.8",
    "scipy>=1.14.0",
    "torchaudio<2.4",
    "matplotlib>=3.9.1.post1",
    "pandas>=2.2.2",
    "notebook>=7.2.1",
    "ipywidgets>=8.1.3",
    "gradio==4.41.0",
    "gdown>=5.2.0",
    "wget>=3.2",
    "seaborn>=0.13.2",
    "transformers>=4.44.0",
    "tqdm>=4.66.5",
    "more-itertools>=10.4.0",
    "onnx>=1.16.2",
    "onnxruntime>=1.18.1",
    "requests>=2.32.3",
    "numpy==1.26",
    "torchcrepe>=0.0.23",
    "LangSegment==0.3.5",
    "cn2an",
    "pypinyin",
    "jieba_fast",
    "wordsegment",
    "g2p_en",
    "pyopenjtalk",
    "opencc",
]
readme = "README.md"
requires-python = ">= 3.10"

[project.scripts]
data-process = 'optispeech.tools.preprocess_dataset:main'
data-stats = 'optispeech.tools.generate_data_statistics:main'
onnx-export = 'optispeech.onnx.export:main'
onnx-infer = 'optispeech.onnx.infer:main'

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
universal = true
dev-dependencies = [
    "cython>=3.0.11",
    "black>=24.8.0",
    "isort>=5.13.2",
    "pytest>=8.3.2",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["optispeech"]

[tool.black]
line-length = 120
target-version = ['py310']
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''

[tool.pytest.ini_options]
addopts = [
  "--color=yes",
  "--durations=0",
  "--strict-markers",
  "--doctest-modules",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]
log_cli = "True"
markers = [
  "slow: slow tests",
]
minversion = "6.0"
testpaths = "tests/"

[tool.coverage.report]
exclude_lines = [
    "pragma: nocover",
    "raise NotImplementedError",
    "raise NotImplementedError()",
    "if __name__ == .__main__.:",
]
